#lang racket
(require "parser.rkt"
         (prefix-in stx: "syntax.rkt"))

(define (parse->string parse space)
  (cond ((list? parse) (for-each (lambda (x) (parse->string x space)) parse))
        ((stx:declar? parse)
         (let ((declr-list (stx:declar-declrs parse)))
           (display (list-ref (caar declr-list) (- (length (caar declr-list)) 1)))
           (display " ")
           (define (write-comma list)
             (let ((name (if (stx:array-exp? (cdar list))
                             (parse->string (cdar list) "")
                             `(,(cadar list))))
                   (star-list (filter (lambda (x) (eq? x '*)) (caar list))))
               (if (null? (cdr list))
                   (begin (for-each display star-list)
                          (for-each display name)
                          (display ";\n"))
                   (begin (for-each display star-list)
                          (for-each display name)
                          (printf ", ")
                          (write-comma  (cdr list))))))
           (write-comma declr-list)))
        ((stx:fun-prot? parse)
         (let ((type (stx:fun-prot-type parse))
               (name (stx:fun-prot-name parse))
               (params (stx:fun-prot-parms parse)))
           (display space)
           (display (list-ref type (- (length type) 1)))
           (display " ")
           (for-each display (filter (lambda (x) (eq? x '*)) type))
           (display name)
           (display "(")
           (define (write-comma list)
             (if (null? list)
                 (display ");\n")
                 (let ((type (list-ref (caaar list) (- (length (caaar list)) 1)))
                       (name `(,(cadar list)))
                       (star-list (filter (lambda (x) (eq? x '*)) (caaar list))))
                   (begin
                     (if (null? (cdr list))
                         (begin (display type)
                                (display " ")
                                (for-each display star-list)
                                (for-each display name)
                                (display " );\n"))
                         (begin (display type)
                                (display " ")
                                (for-each display star-list)
                                (for-each display name)
                                (printf ", ")
                                (write-comma  (cdr list))))))))
           (write-comma params)))
        ((stx:fun-def? parse)
         (let ((type (stx:fun-def-type parse))
               (name (stx:fun-def-name parse))
               (params (stx:fun-def-parms parse))
               (body (stx:fun-def-body parse)))
           (display space)
           (display (list-ref type (- (length type) 1)))
           (display " ")
           (for-each display (filter (lambda (x) (eq? x '*)) type))
           (display name)
           (display "(")
           (define (write-comma list)
             (if (null? list)
                 (display ")")
                 (let ((type (list-ref (caaar list) (- (length (caaar list)) 1)))
                       (name `(,(cadar list)))
                       (star-list (filter (lambda (x) (eq? x '*)) (caaar list))))
                   (begin
                     (if (null? (cdr list))
                         (begin (display type)
                                (display " ")
                                (for-each display star-list)
                                (for-each display name)
                                (display " )"))
                         (begin (display type)
                                (display " ")
                                (for-each display star-list)
                                (for-each display name)
                                (printf ", ")
                                (write-comma  (cdr list))))))))
           (write-comma params)
           (display "{\n")
           (for-each (lambda (x) (display (string-append space "  ")) (parse->string x (string-append space "  "))
                       (cond ((nor (stx:if-stmt? x) (stx:while-stmt? x) (stx:return-stmt? x) (stx:declar? x)) (display ";\n")))) body)
           (display space)
           (display "}\n")))
        ((stx:if-stmt? parse)
         (display "if ( ")
         (parse->string (stx:if-stmt-test parse) "")
         (display " ){\n")
         (for-each (lambda (x) (display (string-append space "  ")) (parse->string x (string-append space "  "))
                     (cond ((nor (stx:if-stmt? x) (stx:while-stmt? x) (stx:return-stmt? x) (stx:declar? x)) (display ";\n")))) (stx:if-stmt-tbody parse))
         (display space)
         (display "} else {\n")
         (for-each (lambda (x) (display (string-append space "  ")) (parse->string x (string-append space "  "))
                     (cond ((nor (stx:if-stmt? x) (stx:while-stmt? x) (stx:return-stmt? x) (stx:declar? x)) (display ";\n")))) (stx:if-stmt-ebody parse))
         (display space)
         (display "}\n")
         )
        ((stx:while-stmt? parse)
         (display "while(")
         (parse->string (stx:while-stmt-test parse) "")
         (display " ){\n")
         (for-each (lambda (x) (display (string-append space "  ")) (parse->string x (string-append space "  "))
                     (cond ((nor (stx:if-stmt? x) (stx:while-stmt? x) (stx:return-stmt? x) (stx:declar? x)) (display ";\n")))) (stx:while-stmt-body parse))
         (display space)
         (display "}\n"))
        ((stx:return-stmt? parse)
         (display "return ")
         (parse->string (stx:return-stmt-exp parse) space)
         (display ";\n"))
        ((stx:assign-exp? parse)
         (parse->string (stx:assign-exp-var parse) space)
         (display " = ")
         (parse->string (stx:assign-exp-src parse) space))
        ((stx:log-exp? parse)
          (if (or (number? (stx:log-exp-left parse)) (symbol? (stx:log-exp-left parse))) 
             (parse->string (stx:log-exp-left parse) space)
             (begin (display "( ")
                    (parse->string (stx:log-exp-left parse) space)
                    (display " )")))
         (display " ")
         (display (stx:log-exp-op parse))
         (display " ")
         (if (or (number? (stx:log-exp-right parse)) (symbol? (stx:log-exp-right parse)))
             (parse->string (stx:log-exp-right parse) space)
             (begin (display "( ")
                    (parse->string (stx:log-exp-right parse) space)
                    (display " )"))))
        ((stx:rop-exp? parse)
         (parse->string (stx:rop-exp-left parse) space)
         (display " ")
         (display (stx:rop-exp-op parse))
         (display " ")
         (parse->string (stx:rop-exp-right parse) space))
        ((stx:aop-exp? parse)
         (if (or (number? (stx:aop-exp-left parse)) (symbol? (stx:aop-exp-left parse)) (stx:comma-exp? (stx:aop-exp-left parse))) 
             (parse->string (stx:aop-exp-left parse) space)
             (begin (display "( ")
                    (parse->string (stx:aop-exp-left parse) space)
                    (display " )")))
         (display " ")
         (display (stx:aop-exp-op parse))
         (display " ")
         (if (or (number? (stx:aop-exp-right parse)) (symbol? (stx:aop-exp-right parse))) 
             (parse->string (stx:aop-exp-right parse) space)
             (begin (display "( ")
                    (parse->string (stx:aop-exp-right parse) space)
                    (display " )"))))
        ((stx:deref-exp? parse)
         (display "*")
         (if (or (number? (stx:deref-exp-arg parse)) (symbol? (stx:deref-exp-arg parse)))
             (parse->string (stx:deref-exp-arg parse) space)
             (begin (display "( ")
                    (parse->string (stx:deref-exp-arg parse) space)
                    (display " )"))))
        ((stx:addr-exp? parse)
         (display '&)
         (if (or (number? (stx:addr-exp-var parse)) (symbol? (stx:addr-exp-var parse)))
             (parse->string (stx:addr-exp-var parse) space)
             (begin (display "( ")
                    (parse->string (stx:addr-exp-var parse) space)
                    (display " )"))))
        ((stx:array-exp? parse)
         (let ((array-name (stx:array-exp-name parse))
               (array-size (stx:array-exp-size parse)))
           (if (stx:array-exp? array-name)
               (append (parse->string array-name space)
                       `(\[ ,array-size \]))
               `(,(car array-name) \[ ,array-size \]))))
        ((stx:call-exp? parse)
         (display (stx:call-exp-tgt parse))
         (display "(")
         (define (write-comma list)
           (if (null? list)
               (display ")")
               (begin
                 (if (null? (cdr list))
                     (begin (display " ")
                            (parse->string (car list) space)
                            (display ")"))
                     (begin (display " ")
                            (parse->string (car list) space)
                            (printf ", ")
                            (write-comma  (cdr list)))))))
         (write-comma (stx:call-exp-args parse)))
        ((stx:comma-exp? parse)
         (display "(")
         (parse->string (stx:comma-exp-left parse) space)
         (display ",")
         (parse->string (stx:comma-exp-right parse) space)
         (display ")"))
        (else (display parse))))
